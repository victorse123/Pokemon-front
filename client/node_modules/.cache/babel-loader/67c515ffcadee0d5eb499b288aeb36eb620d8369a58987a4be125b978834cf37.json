{"ast":null,"code":"// import { \n//     ADD_POKEMON_DETAIL,\n//     FILTER_DB,\n//     FILTER_TYPE,\n//     GET_ALLPOKEMON,\n//     GET_POKEMON_NAME,\n//     GET_POKEMON_TYPES,\n//     ORDER_ATAQUEPOKE,\n//     ORDER_NAMEPOKE,\n//     POST_POKEMON,\n//     RESET_DETAIL,\n//     } from '..//actionType/ActionType';\n\n//   const initialState = {\n//   pokemon:[],\n//   allPokemon:[],\n//   filterTypes:[],\n//   types:[],\n//   detail:{},\n//   };\n\n//   export default function rootReducer(state = initialState, {type,payload}) {\n//     switch (type) {\n//       case GET_ALLPOKEMON:\n//         return {\n//           ...state,\n//           pokemon: payload,\n//           allPokemon: payload,\n//           filterTypes: payload\n\n//         }\n//       case GET_POKEMON_NAME:\n//         return {\n//           ...state,\n//           pokemon: [payload]\n//         }\n//       case ADD_POKEMON_DETAIL:\n//         return {\n//           ...state,\n//           detail: payload,\n//         }\n//       case RESET_DETAIL:\n//         return {\n//           ...state,\n//           detail: {},\n//         }\n\n//         case GET_POKEMON_TYPES:\n//         return {\n//           ...state,\n//           types: payload,\n//         }\n//       case ORDER_NAMEPOKE:\n//         let orderName = [...state.pokemon].sort((a, b) => {\n//           if (a.name< b.name) return payload === 'asc' ? -1 : 1;\n//           if (a.name> b.name) return payload === 'asc' ? 1 : -1;\n//           return 0;\n//         });\n//         return {\n//           ...state,\n//           pokemon: payload === 'name' ? state.allPokemon : orderName,\n//         };\n//       case ORDER_ATAQUEPOKE:      \n//         const orderAtaque = [...state.pokemon].sort((a,b)=> payload === 'mayorAtaque' ? b.stroke-a.stroke : a.stroke-b.stroke );\n//         return {\n//           ...state,\n//           pokemon: payload === 'ataque' ? state.allPokemon : orderAtaque,\n//         };\n//       case FILTER_TYPE:\n//         const filterType = payload === \"todos\" \n//           ? [...state.allPokemon]\n//           : [...state.filterTypes].filter((p)=> p.types.includes(payload))\n//         return {\n//           ...state,\n//           pokemon: filterType,\n//           filterTypes: payload === \"todos\" ? [...state.allPokemon] : [...state.filterTypes]\n//         }\n//       case FILTER_DB:\n//         let filteredDb =[]\n//         if (payload){\n//           filteredDb = [...state.allPokemon].filter( p => p.createdDB === payload)\n//         } else {\n//           filteredDb = [...state.allPokemon].filter( p => p.createdDB === payload)        \n//         }\n//         return {\n//             ...state,\n//             pokemon: filteredDb,\n//             filterTypes: filteredDb\n//           }      \n//       case POST_POKEMON:\n//           return {\n//             ...state,\n//         }\n\n//   default: return {...state};\n//   };\n//   };\n\nimport { ADD_POKEMON_DETAIL, FILTER_DB, FILTER_TYPE, GET_ALLPOKEMON, GET_POKEMON_NAME, GET_POKEMON_TYPES, ORDER_ATAQUEPOKE, ORDER_NAMEPOKE, POST_POKEMON, RESET_DETAIL } from '../actions/actions';\nconst initialState = {\n  pokemon: [],\n  allPokemon: [],\n  filterTypes: [],\n  types: [],\n  detail: {}\n};\nexport default function rootReducer(state = initialState, {\n  type,\n  payload\n}) {\n  switch (type) {\n    case GET_ALLPOKEMON:\n      return {\n        ...state,\n        pokemon: payload,\n        allPokemon: payload,\n        filterTypes: payload\n      };\n    case GET_POKEMON_NAME:\n      return {\n        ...state,\n        pokemon: [payload]\n      };\n    case ADD_POKEMON_DETAIL:\n      return {\n        ...state,\n        detail: payload\n      };\n    case RESET_DETAIL:\n      return {\n        ...state,\n        detail: {}\n      };\n    case GET_POKEMON_TYPES:\n      return {\n        ...state,\n        types: payload\n      };\n    case ORDER_NAMEPOKE:\n      {\n        let orderName = [...state.pokemon].sort((a, b) => {\n          if (a.name < b.name) return payload === 'asc' ? -1 : 1;\n          if (a.name > b.name) return payload === 'asc' ? 1 : -1;\n          return 0;\n        });\n        return {\n          ...state,\n          pokemon: payload === 'name' ? state.allPokemon : orderName\n        };\n      }\n    case ORDER_ATAQUEPOKE:\n      {\n        const orderAtaque = [...state.pokemon].sort((a, b) => payload === 'mayorAtaque' ? b.stroke - a.stroke : a.stroke - b.stroke);\n        return {\n          ...state,\n          pokemon: payload === 'ataque' ? state.allPokemon : orderAtaque\n        };\n      }\n    case FILTER_TYPE:\n      {\n        const filterType = payload === \"todos\" ? [...state.allPokemon] : [...state.filterTypes].filter(p => p.types.includes(payload));\n        return {\n          ...state,\n          pokemon: filterType,\n          filterTypes: payload === \"todos\" ? [...state.allPokemon] : [...state.filterTypes]\n        };\n      }\n    case FILTER_DB:\n      {\n        let filteredDb = [];\n        if (payload) {\n          filteredDb = [...state.allPokemon].filter(p => p.createdDB === payload);\n        } else {\n          filteredDb = [...state.allPokemon].filter(p => p.createdDB === payload);\n        }\n        return {\n          ...state,\n          pokemon: filteredDb,\n          filterTypes: filteredDb\n        };\n      }\n    case POST_POKEMON:\n      return {\n        ...state\n      };\n    default:\n      return {\n        ...state\n      };\n  }\n}","map":{"version":3,"names":["ADD_POKEMON_DETAIL","FILTER_DB","FILTER_TYPE","GET_ALLPOKEMON","GET_POKEMON_NAME","GET_POKEMON_TYPES","ORDER_ATAQUEPOKE","ORDER_NAMEPOKE","POST_POKEMON","RESET_DETAIL","initialState","pokemon","allPokemon","filterTypes","types","detail","rootReducer","state","type","payload","orderName","sort","a","b","name","orderAtaque","stroke","filterType","filter","p","includes","filteredDb","createdDB"],"sources":["C:/Users/Hp/OneDrive/Escritorio/Henry/Bootcamp/Proyecto Individual/PI Pokemons/PI Pokemon/PI Pokemon/client/src/Redux/reducers/Reducers.js"],"sourcesContent":["// import { \r\n//     ADD_POKEMON_DETAIL,\r\n//     FILTER_DB,\r\n//     FILTER_TYPE,\r\n//     GET_ALLPOKEMON,\r\n//     GET_POKEMON_NAME,\r\n//     GET_POKEMON_TYPES,\r\n//     ORDER_ATAQUEPOKE,\r\n//     ORDER_NAMEPOKE,\r\n//     POST_POKEMON,\r\n//     RESET_DETAIL,\r\n//     } from '..//actionType/ActionType';\r\n  \r\n//   const initialState = {\r\n//   pokemon:[],\r\n//   allPokemon:[],\r\n//   filterTypes:[],\r\n//   types:[],\r\n//   detail:{},\r\n//   };\r\n  \r\n  \r\n//   export default function rootReducer(state = initialState, {type,payload}) {\r\n//     switch (type) {\r\n//       case GET_ALLPOKEMON:\r\n//         return {\r\n//           ...state,\r\n//           pokemon: payload,\r\n//           allPokemon: payload,\r\n//           filterTypes: payload\r\n          \r\n//         }\r\n//       case GET_POKEMON_NAME:\r\n//         return {\r\n//           ...state,\r\n//           pokemon: [payload]\r\n//         }\r\n//       case ADD_POKEMON_DETAIL:\r\n//         return {\r\n//           ...state,\r\n//           detail: payload,\r\n//         }\r\n//       case RESET_DETAIL:\r\n//         return {\r\n//           ...state,\r\n//           detail: {},\r\n//         }\r\n      \r\n//         case GET_POKEMON_TYPES:\r\n//         return {\r\n//           ...state,\r\n//           types: payload,\r\n//         }\r\n//       case ORDER_NAMEPOKE:\r\n//         let orderName = [...state.pokemon].sort((a, b) => {\r\n//           if (a.name< b.name) return payload === 'asc' ? -1 : 1;\r\n//           if (a.name> b.name) return payload === 'asc' ? 1 : -1;\r\n//           return 0;\r\n//         });\r\n//         return {\r\n//           ...state,\r\n//           pokemon: payload === 'name' ? state.allPokemon : orderName,\r\n//         };\r\n//       case ORDER_ATAQUEPOKE:      \r\n//         const orderAtaque = [...state.pokemon].sort((a,b)=> payload === 'mayorAtaque' ? b.stroke-a.stroke : a.stroke-b.stroke );\r\n//         return {\r\n//           ...state,\r\n//           pokemon: payload === 'ataque' ? state.allPokemon : orderAtaque,\r\n//         };\r\n//       case FILTER_TYPE:\r\n//         const filterType = payload === \"todos\" \r\n//           ? [...state.allPokemon]\r\n//           : [...state.filterTypes].filter((p)=> p.types.includes(payload))\r\n//         return {\r\n//           ...state,\r\n//           pokemon: filterType,\r\n//           filterTypes: payload === \"todos\" ? [...state.allPokemon] : [...state.filterTypes]\r\n//         }\r\n//       case FILTER_DB:\r\n//         let filteredDb =[]\r\n//         if (payload){\r\n//           filteredDb = [...state.allPokemon].filter( p => p.createdDB === payload)\r\n//         } else {\r\n//           filteredDb = [...state.allPokemon].filter( p => p.createdDB === payload)        \r\n//         }\r\n//         return {\r\n//             ...state,\r\n//             pokemon: filteredDb,\r\n//             filterTypes: filteredDb\r\n//           }      \r\n//       case POST_POKEMON:\r\n//           return {\r\n//             ...state,\r\n//         }\r\n      \r\n//   default: return {...state};\r\n//   };\r\n//   };\r\n\r\n  import { \r\n    ADD_POKEMON_DETAIL,\r\n    FILTER_DB,\r\n    FILTER_TYPE,\r\n    GET_ALLPOKEMON,\r\n    GET_POKEMON_NAME,\r\n    GET_POKEMON_TYPES,\r\n    ORDER_ATAQUEPOKE,\r\n    ORDER_NAMEPOKE,\r\n    POST_POKEMON,\r\n    RESET_DETAIL,\r\n  } from '../actions/actions';\r\n  \r\n  const initialState = {\r\n    pokemon: [],\r\n    allPokemon: [],\r\n    filterTypes: [],\r\n    types: [],\r\n    detail: {},\r\n  };\r\n  \r\n  export default function rootReducer(state = initialState, { type, payload }) {\r\n    switch (type) {\r\n      case GET_ALLPOKEMON:\r\n        return {\r\n          ...state,\r\n          pokemon: payload,\r\n          allPokemon: payload,\r\n          filterTypes: payload,\r\n        };\r\n      case GET_POKEMON_NAME:\r\n        return {\r\n          ...state,\r\n          pokemon: [payload],\r\n        };\r\n      case ADD_POKEMON_DETAIL:\r\n        return {\r\n          ...state,\r\n          detail: payload,\r\n        };\r\n      case RESET_DETAIL:\r\n        return {\r\n          ...state,\r\n          detail: {},\r\n        };\r\n      case GET_POKEMON_TYPES:\r\n        return {\r\n          ...state,\r\n          types: payload,\r\n        };\r\n      case ORDER_NAMEPOKE: {\r\n        let orderName = [...state.pokemon].sort((a, b) => {\r\n          if (a.name < b.name) return payload === 'asc' ? -1 : 1;\r\n          if (a.name > b.name) return payload === 'asc' ? 1 : -1;\r\n          return 0;\r\n        });\r\n        return {\r\n          ...state,\r\n          pokemon: payload === 'name' ? state.allPokemon : orderName,\r\n        };\r\n      }\r\n      case ORDER_ATAQUEPOKE: {\r\n        const orderAtaque = [...state.pokemon].sort((a, b) => payload === 'mayorAtaque' ? b.stroke - a.stroke : a.stroke - b.stroke);\r\n        return {\r\n          ...state,\r\n          pokemon: payload === 'ataque' ? state.allPokemon : orderAtaque,\r\n        };\r\n      }\r\n      case FILTER_TYPE: {\r\n        const filterType = payload === \"todos\"\r\n          ? [...state.allPokemon]\r\n          : [...state.filterTypes].filter((p) => p.types.includes(payload));\r\n        return {\r\n          ...state,\r\n          pokemon: filterType,\r\n          filterTypes: payload === \"todos\" ? [...state.allPokemon] : [...state.filterTypes],\r\n        };\r\n      }\r\n      case FILTER_DB: {\r\n        let filteredDb = [];\r\n        if (payload) {\r\n          filteredDb = [...state.allPokemon].filter(p => p.createdDB === payload);\r\n        } else {\r\n          filteredDb = [...state.allPokemon].filter(p => p.createdDB === payload);\r\n        }\r\n        return {\r\n          ...state,\r\n          pokemon: filteredDb,\r\n          filterTypes: filteredDb,\r\n        };\r\n      }\r\n      case POST_POKEMON:\r\n        return {\r\n          ...state,\r\n        };\r\n  \r\n      default:\r\n        return { ...state };\r\n    }\r\n\r\n\r\n\r\n  }\r\n\r\n\r\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEE,SACEA,kBAAkB,EAClBC,SAAS,EACTC,WAAW,EACXC,cAAc,EACdC,gBAAgB,EAChBC,iBAAiB,EACjBC,gBAAgB,EAChBC,cAAc,EACdC,YAAY,EACZC,YAAY,QACP,oBAAoB;AAE3B,MAAMC,YAAY,GAAG;EACnBC,OAAO,EAAE,EAAE;EACXC,UAAU,EAAE,EAAE;EACdC,WAAW,EAAE,EAAE;EACfC,KAAK,EAAE,EAAE;EACTC,MAAM,EAAE,CAAC;AACX,CAAC;AAED,eAAe,SAASC,WAAWA,CAACC,KAAK,GAAGP,YAAY,EAAE;EAAEQ,IAAI;EAAEC;AAAQ,CAAC,EAAE;EAC3E,QAAQD,IAAI;IACV,KAAKf,cAAc;MACjB,OAAO;QACL,GAAGc,KAAK;QACRN,OAAO,EAAEQ,OAAO;QAChBP,UAAU,EAAEO,OAAO;QACnBN,WAAW,EAAEM;MACf,CAAC;IACH,KAAKf,gBAAgB;MACnB,OAAO;QACL,GAAGa,KAAK;QACRN,OAAO,EAAE,CAACQ,OAAO;MACnB,CAAC;IACH,KAAKnB,kBAAkB;MACrB,OAAO;QACL,GAAGiB,KAAK;QACRF,MAAM,EAAEI;MACV,CAAC;IACH,KAAKV,YAAY;MACf,OAAO;QACL,GAAGQ,KAAK;QACRF,MAAM,EAAE,CAAC;MACX,CAAC;IACH,KAAKV,iBAAiB;MACpB,OAAO;QACL,GAAGY,KAAK;QACRH,KAAK,EAAEK;MACT,CAAC;IACH,KAAKZ,cAAc;MAAE;QACnB,IAAIa,SAAS,GAAG,CAAC,GAAGH,KAAK,CAACN,OAAO,CAAC,CAACU,IAAI,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAK;UAChD,IAAID,CAAC,CAACE,IAAI,GAAGD,CAAC,CAACC,IAAI,EAAE,OAAOL,OAAO,KAAK,KAAK,GAAG,CAAC,CAAC,GAAG,CAAC;UACtD,IAAIG,CAAC,CAACE,IAAI,GAAGD,CAAC,CAACC,IAAI,EAAE,OAAOL,OAAO,KAAK,KAAK,GAAG,CAAC,GAAG,CAAC,CAAC;UACtD,OAAO,CAAC;QACV,CAAC,CAAC;QACF,OAAO;UACL,GAAGF,KAAK;UACRN,OAAO,EAAEQ,OAAO,KAAK,MAAM,GAAGF,KAAK,CAACL,UAAU,GAAGQ;QACnD,CAAC;MACH;IACA,KAAKd,gBAAgB;MAAE;QACrB,MAAMmB,WAAW,GAAG,CAAC,GAAGR,KAAK,CAACN,OAAO,CAAC,CAACU,IAAI,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAKJ,OAAO,KAAK,aAAa,GAAGI,CAAC,CAACG,MAAM,GAAGJ,CAAC,CAACI,MAAM,GAAGJ,CAAC,CAACI,MAAM,GAAGH,CAAC,CAACG,MAAM,CAAC;QAC5H,OAAO;UACL,GAAGT,KAAK;UACRN,OAAO,EAAEQ,OAAO,KAAK,QAAQ,GAAGF,KAAK,CAACL,UAAU,GAAGa;QACrD,CAAC;MACH;IACA,KAAKvB,WAAW;MAAE;QAChB,MAAMyB,UAAU,GAAGR,OAAO,KAAK,OAAO,GAClC,CAAC,GAAGF,KAAK,CAACL,UAAU,CAAC,GACrB,CAAC,GAAGK,KAAK,CAACJ,WAAW,CAAC,CAACe,MAAM,CAAEC,CAAC,IAAKA,CAAC,CAACf,KAAK,CAACgB,QAAQ,CAACX,OAAO,CAAC,CAAC;QACnE,OAAO;UACL,GAAGF,KAAK;UACRN,OAAO,EAAEgB,UAAU;UACnBd,WAAW,EAAEM,OAAO,KAAK,OAAO,GAAG,CAAC,GAAGF,KAAK,CAACL,UAAU,CAAC,GAAG,CAAC,GAAGK,KAAK,CAACJ,WAAW;QAClF,CAAC;MACH;IACA,KAAKZ,SAAS;MAAE;QACd,IAAI8B,UAAU,GAAG,EAAE;QACnB,IAAIZ,OAAO,EAAE;UACXY,UAAU,GAAG,CAAC,GAAGd,KAAK,CAACL,UAAU,CAAC,CAACgB,MAAM,CAACC,CAAC,IAAIA,CAAC,CAACG,SAAS,KAAKb,OAAO,CAAC;QACzE,CAAC,MAAM;UACLY,UAAU,GAAG,CAAC,GAAGd,KAAK,CAACL,UAAU,CAAC,CAACgB,MAAM,CAACC,CAAC,IAAIA,CAAC,CAACG,SAAS,KAAKb,OAAO,CAAC;QACzE;QACA,OAAO;UACL,GAAGF,KAAK;UACRN,OAAO,EAAEoB,UAAU;UACnBlB,WAAW,EAAEkB;QACf,CAAC;MACH;IACA,KAAKvB,YAAY;MACf,OAAO;QACL,GAAGS;MACL,CAAC;IAEH;MACE,OAAO;QAAE,GAAGA;MAAM,CAAC;EACvB;AAIF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}